##################################################
## locate: ${XDG_CONFIG_HOME}/zsh/zsh-functions ##
## author: milomouse (github.com/milomouse)     ##
## detail: configuration file for zsh functions ##
##################################################

# use history, but skip certain cmds/args from being written:
function zshaddhistory {
  local line cmd
  line=${1%%$'\n'} ; cmd=${line%% *}
  [[ ${#line} -ge 5
      && ${cmd} != (history|fc|[szx]edit|[zx]load|srm|wika)
  ]] && (( ! $argv[(I)*unrl*|*spar*|*losetup*|*aespipe*|sudo rm *|mpq q *] ))
}

# safely recompile and reload shell settings:
function zload {
  sudo . /etc/profile 2>/dev/null
  . /etc/profile 2>/dev/null
  autoload -U zrecompile
  [[ -f ~/.zshrc ]] && zrecompile -p ~/.zshrc
  [[ -f ~/.zcompdump ]] && zrecompile -p ~/.zcompdump
  [[ -f ~/.zshrc.zwc.old ]] && rm -f ~/.zshrc.zwc.old
  [[ -f ~/.zcompdump.zwc.old ]] && rm -f ~/.zcompdump.zwc.old
  . ~/.zshrc
}

# jump to previous directory by integer or reg-exp, also list dirs,
# else jump to last visited directory if no argument supplied:
# NOTE: try to remember to use ZSH directory stack instead... ( cd [-|+]^Tab )
function back {
  if [[ $# == 1 ]]; then
    case $1 {
      <->)  pushd -q +$1 >& - ;;
      --)   dirs -lpv|sed '2s|$| \[last\]|' ;;
      *)    [[ -n $(dirs -lpv|grep -i $1|grep -v ${PWD}) ]] && \
              pushd -q +${$(dirs -lpv|grep -i $1|grep -v ${PWD})[1]}
    }
  else pushd -q - >& - ; fi
}

# go up Nth amount of directories:
function up {
  local arg=${1:-1};
  while [ ${arg} -gt 0 ]; do
    cd .. >& -;
    arg=$((${arg} - 1));
  done
}

# copy and follow file(s) to new dir:
function cpf {
  if [[ -d $*[-1] ]]; then
    cp $* && cd $*[-1]
  elif [[ -d ${*[-1]%/*} ]]; then
    cp $* && cd ${*[-1]%/*}
  fi
}

# move and follow file(s) to new dir:
function mvf {
  if [[ -d $*[-1] ]]; then
    mv $* && cd $*[-1]
  elif [[ -d ${*[-1]%/*} ]]; then
    mv $* && cd ${*[-1]%/*}
  fi
}

# update fonts:
function upf {
  cd /usr/share/fonts/local
  /usr/bin/fc-cache -vr
  sudo /usr/bin/fc-cache -vr
  sudo mkfontdir
  sudo mkfontscale
  if [[ ${+DISPLAY} == 1 ]]; then
    xset +fp '/usr/share/fonts/local'
    xset fp rehash
  fi
  cd - &>/dev/null
}

# quirky tmux function:
function tmux {
  if [[ ${@[-2]} == '--' ]]; then
    command tmux ${@%--}
  else
    case ${+DISPLAY} in
      0)  command tmux -S /tmp/user-keep/${USER}/tmux/default $@ ;;
      1)  command tmux -S /tmp/user-keep/${USER}/tmux/xorg $@ ;;
    esac
  fi
}

# function to quickly view StarDict word definitions:
function sd {
  case $1 in
    '-ru') sdcv --utf8-output -u "dictd_www.freedict.de_eng-rus" ${@:/$1} 2>/dev/null ;;
    '-re') sdcv --utf8-output -u "Full Russian-English" ${@:/$1} 2>/dev/null ;;
    '-er') sdcv --utf8-output -u "Full English-Russian" ${@:/$1} 2>/dev/null ;;
    '-t') sdcv --utf8-output -u "English Thesaurus" ${@:/$1} 2>/dev/null ;;
    '-w') sdcv --utf8-output -u "WordNet" -u "English Thesaurus" ${@:/$1} 2>/dev/null ;;
    '-a') sdcv --utf8-output ${@:/$1} 2>/dev/null ;;
    *) sdcv --utf8-output -u "WordNet" ${@} 2>/dev/null ;;
  esac
}

# un-smart function for my todo lists:
function todo {
  case $# {
    0) ( setopt nonomatch ; print -C 1 ${$(ls -1 ${H:-/howl}/othe/.TODO_* 2>/dev/null)/*_} ) ;;
    1) command vim ${H:-/howl}/othe/.TODO_$1 ;;
    *) command vim ${H:-/howl}/othe/.TODO_${@// /_}
  }
}

# un-smart function for viewing/editing history file (still use 'fc/history'):
function zhist {
  if [[ $# -ge 1 ]]; then
    case $1 {
      '-a'|'-all') <${ZDOTDIR:-${HOME}/zsh}/.history | ${PAGER:-less} ;;
      '-e'|'--edit') ${EDITOR:-/usr/bin/vim} ${ZDOTDIR:-${HOME}/zsh}/.history ;;
      '-f'|'--find') [[ -n $2 ]] && <${ZDOTDIR:-${HOME}/zsh}/.history|grep -i "${${@:/$1}// /\|}" ;;
    }
  else
    print - "options: -e (edit), -f (find), -a (all)"
  fi
}

# un-smart function for viewing sectioned partitions:
function dfu() {
  local FSTYPES
  FSTYPES=(nilfs2 btrfs ext2 ext3 ext4 jfs xfs zfs reiserfs reiser4 minix ntfs ntfs-3g fat vfat fuse)
  df -hTP -x rootfs -x devtmpfs -x tmpfs -x none ; print
  df -hTP $(for f in $FSTYPES; { print - " -x $f" })
}

# quickly view the Linux kernel 'if-tainted' information:
function iftainted() {
  case $(</proc/sys/kernel/tainted) {
    1) print "1: A module with a non-GPL license has been loaded, this includes modules with no license." ;;
    2) print "2: A module was force loaded by insmod -f." ;;
    4) print "4: Unsafe SMP processors: SMP with CPUs not designed for SMP." ;;
    8) print "8: A module was forcibly unloaded from the system by rmmod -f." ;;
    16) print "16: A hardware machine check error occurred on the system." ;;
    32) print "32: A bad page was discovered on the system." ;;
    64) print "64: The user has asked that the system be marked tainted." ;;
    128) print "128: The system has died." ;;
    256) print "256: The ACPI DSDT has been overridden with one supplied by the user instead of using the one provided by the hardware." ;;
    512) print "512: A kernel warning has occurred." ;;
    1024) print "1024: A module from drivers/staging was loaded." ;;
    *) print "Kernel does not appear to be tainted, or unknown." ;;
  }
}

# quickly view MailDir new count for each folder:
function newmail {
  for mail in /howl/mail/FastMail/* ; do
    local _x
    _x=${(Fw)#$(find ${mail}/new -type f)%/new/*}
    if [[ ${_x} -ge 1 && ${mail:t} != "Sent Items" ]] {
      print "$mail:t:l = ${_x}"
    }
    unset _x
  done
  unset mail
}

# quickly view current CPU frequency and thermal readings:
function cpuq {
  cpupower frequency-info | while { read c } { if [[ $c:l =~ "cpu frequency" ]] { print - "Freq: ${${c#*is }%.}" };}
  acpi -t | while { read a } { print - "Temp:${a#*,}" ; break }
}

# quickly check/initiate pulseaudio and mifo daemons:
function mpx {
  case $1:l {
    stop|disable)
      print - "stopping : pulseaudio"
      pulseaudio -k
      print - "stopping : mifo"
      mifo --quit
    ;;
    *)
      pulseaudio --check
      if [[ $? != 0 ]] {
        print - "initiate : pulseaudio"
        pulseaudio --start --log-target=syslog --daemonize
      } else { print - "running  : pulseaudio" }
      mifo --instance quiet
      if [[ $? != 0 ]] {
        print - "initiate : mifo"
        mifo --init
      } else { print - "running  : mifo" }
    ;;
};}

# some lengthy Gentoo commands summed up for ease of use:
function gent {
  if [[ -z $1 ]] {
    << EOG
################# Gentoo Commands Summarized! #######
#                                                   #
#  sync   =  "synchronize gentoo package database"  #
#  up     =  "update system with all dependencies"  #
#  new    =  "update system + deps; --newuse only"  #
#  clean  =  "clean up package files and database"  #
#                                                   #
#  fix    =  "detect possible breakage and fix it"  #
#  diff   =  "compare and modify upgraded configs"  #
#  edit   =  "edit the gentoo configuration files"  #
#  pkg    =  "display installed packages; tallied"  #
#                                                   #
#  full   =  "completely update and tend packages"  #
#                                                   #
#####################################################
EOG
  } else {
    _Gc(){ sudo emerge --depclean -v --ask ; sudo emerge --clean -v --ask ; sudo eclean -C -d -t1w distfiles }
    _Gf(){ sudo revdep-rebuild ; sudo emerge @preserved-rebuild -v --ask }
    _Gn(){ sudo emerge --update --deep --with-bdeps=y --ask -v --newuse @world }
    _Gu(){ sudo emerge --update --deep --with-bdeps=y --ask -v @world && _Gn }
    _Gs(){
      sudo emerge --sync
      [[ $(emerge -1p --quiet=y portage|grep '\[ebuild   R    \]' -c) == 1 ]] || sudo emerge -1v portage
    }
    _Gp(){ _gp=(${${$(command ls -d /var/db/pkg/*/*)#/var/db/pkg/}%/}) ; print -C1 ${_gp} ; print "\nTotal Packages: ${#_gp}" ; unset _gp }
    _Gd(){ sudo dispatch-conf }
    _Ge(){ sudo vim -p /etc/portage/{package.use,package.accept_keywords,package.unmask,package.license,make.conf} }
    case $1 {
      sync) _Gs ;;
      up) _Gu ;;
      new) _Gn ;;
      clean) _Gc ;;
      fix) _Gf ;;
      diff) _Gd ;;
      full) _Gs ; _Gu ; _Gc ; _Gf ;  _Gd ;;
      edit) _Ge ;;
      pkg) _Gp ;;
      *) print - "invalid command: type  \`gent help'  for proper usage." ;;
    }
    unfunction _Gc _Gf _Gu _Gs _Gp _Gd _Ge
};}

# one-liners/micro functions:
function mkcd { command mkdir -p "$@" && cd "$@" }
function timec { print "$(date +'%T %Y-%m-%d')" ; while sleep .2 ; do printf '\r%s ' "$(date +'%T %Y-%m-%d')" ; done }
function dropcache { sync && command su -s /bin/zsh -c 'echo 3 > /proc/sys/vm/drop_caches' root }
function flashproc { for f (${$(file /proc/$(pidof luakit)/fd/*|gawk '/\/tmp\/Flash/ { print $1}')//:}){ print - "$f" }}
function hc { command herbstclient "$@" }
