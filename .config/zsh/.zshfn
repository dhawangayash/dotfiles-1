# go up X amount of directories:
function up(){
  local arg=${1:-1};
  while [ $arg -gt 0 ]; do
    cd .. >&/dev/null;
    arg=$(($arg - 1));
  done
}

# jump to previous directory by number or last visited:
function back() {
  case $1 in
  [a-zA-Z]) : ;;
  <->) pushd -q +$1 ;;
  l)   dirs -lpv|sed '2 s|$| \[last\]|' ;;
  *)   pushd -q -
  esac
}

# copy and follow file to new dir:
function cpf() {
if [[ -d $*[-1] ]]; then
  cp $* && cd $*[-1]
elif [[ -d ${*[-1]%/*} ]]; then
  cp $* && cd ${*[-1]%/*}
fi
}

# move and follow file to new dir:
function mvf() {
if [[ -d $*[-1] ]]; then
  mv $* && cd $*[-1]
elif [[ -d ${*[-1]%/*} ]]; then
  mv $* && cd ${*[-1]%/*}
fi
}

# make folder and chdir into it:
function mkcd() {mkdir -p "$@" && cd "$@"}

# extract archive with preferred options:
function extr() {
  if [ -f $1 ] ; then 
    case $1 in
      *.tar.bz2)   tar xjf $1    ;;
      *.tar.gz)    tar xzf $1    ;;
      *.bz2)       bunzip2 $1    ;;
      *.rar)       unrar e $1    ;;
      *.gz)        gunzip $1     ;;
      *.tar)       tar xf $1     ;;
      *.tbz2)      tar xjf $1    ;;
      *.tgz)       tar xzf $1    ;;
      *.zip)       unzip $1      ;;
      *.Z)         uncompress $1 ;;
      *.7z)        7z x $1       ;;
      *.xz)        unxz -vk $1   ;;
      *.lzma)      unlzma -vk $1 ;;
      *)           echo "'$1' cannot be extracted via extr()" ;;
    esac
  else
    echo "'$1' is not a valid file"
fi
}

# {start,stop,restart} daemon:
function rcstart() {sudo /etc/rc.d/$1 start}
function rcstop() {sudo /etc/rc.d/$1 stop}
function rcrestart() {sudo /etc/rc.d/$1 restart}

# reload a module:
function reprobe() {
  sudo modprobe -r $1
  sudo modprobe $1
}

function 256co() {perl -e 'foreach $i (0..255) {printf("\e[38;5;$i"."m%03d\e[0m ",$i); }'}
function pubip() {curl http://whatismyip.org/ 2>/dev/null}
function qdep() {pacman-color -Q $@ $(pacman-color -Qi $@|grep Depends|cut -d: -f2-|sed -E 's,>\S+\>,,g')}

# playing videos:
function mp() {
  case $1 in
  'm') # movies, toggle mpd and keep/restore old volume.
  if [ $(mpc|wc -l) = 3 ]; then
    if [ $(mpc|head -2|tail -1|awk '{print $1}') = "[paused]" ]; then
      :
    else
      mpc toggle >>/dev/null
    fi
  fi
  for vol in $(ossmix|grep outvol|awk '{print $4}'); do
    ossmix vmix0-outvol 25 >>/dev/null
    mplayer -fs -really-quiet $@
    ossmix vmix0-outvol $vol >>/dev/null
  done
  if [ $(mpc|wc -l) = 3 ]; then
    if [ $(mpc|head -2|tail -1|awk '{print $1}') = "[paused]" ]; then
      mpc toggle >>/dev/null
    fi
  fi
  ;;
  'r') # random movie, same settings above
  if [ $(mpc|wc -l) = 3 ]; then
    if [ $(mpc|head -2|tail -1|awk '{print $1}') = "[paused]" ]; then
      :
    else
      mpc toggle >>/dev/null
    fi
  fi
  for vol in $(ossmix|grep outvol|awk '{print $4}'); do
    ossmix vmix0-outvol 25 >>/dev/null
    if [[ -n "$2" ]]; then
      if [ "$3" ]; then
        local movie="$(find $HOME/vide/movi/$2.$3.*--* -maxdepth 1 -type f|sort -R|tail -1)"
        [[ -n $(print $movie|grep "(part_") ]] && movie=$(print $movie|sed 's|part_.*)|part_01)|')
        print "["$(find $HOME/vide/movi/$2.$3.*--* -maxdepth 1 -type f|wc -l)"]" $movie
        mplayer -fs -really-quiet $movie
      elif [[ "$2" = [1-5] ]]; then
        local movie="$(find $HOME/vide/movi/$2.*.*--* -maxdepth 1 -type f|sort -R|tail -1)"
        print "["$(find $HOME/vide/movi/$2.*.*--* -maxdepth 1 -type f|wc -l)"]" $movie
        mplayer -fs -really-quiet $movie
      else
        local movie="$(find $HOME/vide/movi/*.*.*--$2* -maxdepth 1 -type f|sort -R|tail -1)"
        print "["$(find $HOME/vide/movi/*.*.*--$2* -maxdepth 1 -type f|wc -l)"]" $movie
        mplayer -fs -really-quiet $movie
      fi
    else
      local movie="$(find $HOME/vide/movi -maxdepth 1 -type f|sort -R|tail -1)"
      [[ -n $(print $movie|grep "(part_") ]] && movie=$(print $movie|sed 's|part_.*)|part_01)|')
      print "["$(find $HOME/vide/movi -maxdepth 1 -type f|wc -l)"]" $movie
      mplayer -fs -really-quiet $movie
    fi
    ossmix vmix0-outvol $vol >>/dev/null
  done
  if [ $(mpc|wc -l) = 3 ]; then
    if [ $(mpc|head -2|tail -1|awk '{print $1}') = "[paused]" ]; then
      mpc toggle >>/dev/null
    fi
  fi
  ;;
  'q') # no mplayer statistics, quick plays.
  mplayer -really-quiet $@
  ;;
  'n') # ^+ no sound/reference viewing.
  mplayer -nosound -really-quiet $@
  ;;
  *) # else; just play.
  mplayer $@
  ;;
  esac
}

# quickly view definitions:
function sd() {
  case $1 in
    -w | -wordnet ) sdcv -u "WordNet" $2 ;;
    -t | -thesaurus ) sdcv -u "English Thesaurus" $2 ;;
    -a | -all ) sdcv $2 ;;
    *) sdcv -u "WordNet" $@
  esac
}

# show biggest programs (adopted):
function biggest() {
echo "-----+---------+---------------------------"
echo " POS | SIZE MB |            NAME " 
echo "-----+---------+---------------------------"
pacman -Qs|awk '/local/{print substr($3,2)" "substr($1,7)}'|sort -rn|head -$1|awk '{printf "%4d | %7s | %s\n",NR,$1,$2}'
}

# un-smart function for my todo lists:
function todo() {
  local dir=$HOME/othe
  case $1 in
    -l ) ls -1 $dir/.TODO* ;;
    * ) vim $dir/.TODO_$1 ;;
  esac
}
