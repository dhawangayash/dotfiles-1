;;--------------------------------------------------------------------------;;
;; ${XDG_CONFIG_DIR:-/howl/conf}/.stumpwmrc                                 ;;
;;--------------------------------------------------------------------------;;
;; author: milomouse <vincent[at]fea.st>                                    ;;
;;--------------------------------------------------------------------------;;
;; versions used atoc:                                                      ;;
;; |  sbcl             -> 1.0.54-1                                          ;;
;; |  clx              -> 0.7.4-2                                           ;;
;; |  cl-ppcre         -> 2.0.3-2                                           ;;
;; |  stumpwm          -> 0.9.7-80-gb1271a9 Compiled On Thu Dec 08 10:46:16 ;;
;;-TODO/CHANGELOG:----------------------------------------------------------;;
;; >>>-: create a 'dedicate' and 'catchall' window-rule (remember * *)      ;;
;; >>--: create a 'dedicate' and 'catchall' hook for changing focus color   ;;
;; >>--: have mifo(mplayer-daemon) prompts use filename completion          ;;
;; >---: better resize; if neighbour {above} then -ARG else +ARG, etc.      ;;
;; >>>-: show frame-indicator for 'resize' only if no window in frame       ;;
;; >>>>? command for dedicating current win/frame as the Master win/frame   ;;
;; >---: better command for Master; remember Master thru re{loadrc,start}   ;;
;; >>>>! command for swapping current window with the Master win/frame      ;;
;; >>>>! exchange two windows but keep focus in current frame               ;;
;; >>>>! dynamically dump group|screen|desktop|rules to *data-dir* by type  ;;
;; >>>>! dynamically load group|screen|desktop|rules from *data-dir* by type;;
;; >>>>! have my 'undo' use group and check current group for undos first   ;;
;; >>>>! create a togglable, on-the-fly scratchpad group                    ;;
;;--------------------------------------------------------------------------;;
;; files: *data-dir*/../{commands,functions,hooks,key-maps,macros}.lisp     ;;
;;--------------------------------------------------------------------------;;

(in-package :stumpwm)

;; set a home-dir. not relative *default-pathname-defaults*.
;; set a data-dir for storing debug-file, group and placement dumps, etc.
;; set undo directory to store each group (and desktop) undo states.
;; set scratchpad group name for when it's created on the fly (.NAME to hide)
(setf *home-dir* (make-pathname :directory "/howl")
      *data-dir* (merge-pathnames (make-pathname :directory
                 '(:relative "conf" "stumpwm" "storage")) *home-dir*)
      *undo-data-dir* (make-pathname :directory "/dev/shm/.1009")
      *scratchpad-group-name* ".scratchpad"
      *debug-level* 1)

;; setup a quick function for redirecting debug information directly to file.
;; (didn't want to use (redirect-all-output) as that's not what i want..)
;; (prefer internal handling as opposed to redirecting via exec $ >>! file)
(defvar *debug-restream* nil)
(defun redirect-debug (file) "Redirect *debug-stream* directly to a file."
  (when (typep *debug-restream* 'file-stream)
    (close *debug-restream*))
  (setf *debug-restream* (open file :direction :output :if-exists :append
                         :if-does-not-exist :create)
        *debug-stream* *debug-restream*))

;; setup debug-file variable for referencing (e.g. quitting) purposes.
(defvar *debug-file* (data-dir-file "log" "lisp"))
(redirect-debug *debug-file*)

;; before we go further, rewrite colon command to old behavior.
;; (this should already be fixed in newest version)
(defcommand colon (&optional initial-input) (:rest)
  (let ((cmd (completing-read (current-screen) ": "
          (all-commands) :initial-input (or initial-input ""))))
    (unless cmd
      (throw 'error :abort))
    (when (plusp (length cmd))
      (eval-command cmd t))))

;; redefine run-shell-command for 'zsh', change :shell "", and fix a typo.
(defcommand run-shell-command (cmd &optional collect-output-p)
  ((:shell "execute: "))
  "Run the specified shell command. If @var{collect-output-p} is @code{T}
then run the command synchronously and collect the output."
  (if collect-output-p
    (run-prog-collect-output *shell-program* "-c" cmd)
    (run-prog *shell-program* :args (list "-c" cmd) :wait nil)))
(setf *shell-program* "/bin/zsh")
;(setf *shell-program* (stumpwm::getenv "SHELL"))
(defcommand-alias exec run-shell-command)

;; define a background-image-path for random image setting function.
;; (will soon change this to accept optional sub-dir for situations where
;; user wants to use 'work' or 'family' wallpapers instead)
(defvar *background-image-path*
  (merge-pathnames
    (make-pathname :directory '(:relative "foto" "wall")) *home-dir*))

;; gravities.
(setf *mouse-focus-policy* :click
      *window-border-style* :thin
      *message-window-gravity* :top-right
      *input-window-gravity* :top-right)
(set-normal-gravity :top) ; top for terminals
(set-maxsize-gravity :center) ; center for floating X apps
(set-transient-gravity :center) ; center for save-as/open popups

;; borders.
(setf *resize-hides-windows* T
      *normal-border-width* 2
      *maxsize-border-width* 2
      *transient-border-width* 2
      *float-window-border* 1
      *float-window-title-height* 1)
(set-msg-border-width 1)

;; fonts/colors.
(set-font "-misc-fixed-medium-r-semicondensed-*-12-110-75-75-c-60-koi8-r")
(set-fg-color        "grey64")
(set-bg-color        "grey14")
(set-focus-color     "grey60")
;(set-focus-color     "mediumpurple2")
(set-unfocus-color   "grey16")
(set-border-color    "grey44")
(set-win-bg-color    "grey6")
(setf *colors* (list "grey9"          ; 0 black
                     "palevioletred1" ; 1 red
                     "lightblue3"     ; 2 green
                     "bisque3"        ; 3 yellow
                     "steelblue3"     ; 4 blue
                     "slateblue1"     ; 5 magenta
                     "aquamarine4"    ; 6 cyan
                     "honeydew4"      ; 7 white
                     "thistle4"       ; 8 user
                     "lightskyblue4")); 9 user
(update-color-map (current-screen))

;; text formatting (no mode-line). shorten time-day-names, etc.
(setf *startup-message*
       "^B^1*together we ate the king^n:^B^5*and laughed ourselves to death^n"
      *time-day-names* #("Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun")
      *time-format-string-default* "^B^2*%T^9* %Y-%m-%d^**/^8*%A^n"
      *group-format*    "^B^0*%t^7*%s^07|^n"
      *window-format*   "^B^87%s^9*%m^0*%16t^n"
      *screen-mode-line-format* nil
      *timeout-wait* 6)

;; windows/frames. use more intuitive frame-numbers (with 'fselect').
(setf *default-window-name* "null"
      *new-frame-action* :empty
      *min-frame-width* 45
      *min-frame-height* 45
      *resize-increment* 2
      *frame-number-map* "yhjukilop")

;; mode-line and input.
(setf *mode-line-background-color* "grey5"
      *mode-line-border-color* "grey10"
      *mode-line-foreground-color* "azure4"
      *mode-line-border-width* 1
      *mode-line-pad-x* 1
      *mode-line-pad-y* 0
      *mode-line-timeout* 300
      *mode-line-position* :top
      *input-history-ignore-duplicates* 0)

;; load external settings files. these are the bulk of setup/optimizations.
(loop for file in '("functions" "macros" "commands" "hooks" "key-maps")
  do (load (merge-pathnames (make-pathname :name file :type "lisp"
           :directory '(:relative "conf" "stumpwm")) *home-dir*)))

;; restore data from previous exit (state StumpWM was last using),
(clear-window-placement-rules)
(setf (group-name (first (screen-groups (current-screen)))) "1")
(make-groups-bg "2" "3" "4" "5" "6")
(if (probe-file (data-dir-file "desktop.lisp"))
    (restore-from-file (data-dir-file "desktop.lisp")))
(restore-window-placement-rules (data-dir-file "tile-rules.lisp"))
(cond ((string-equal (group-name (current-group)) *scratchpad-group-name*) (gother)))

;; display a random background image on root window.
;(display-random-bg)

;; EOF
